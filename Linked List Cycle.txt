Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

python3
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        try:
            slow = head
            fast = head.next
            while slow is not fast:
                slow = slow.next
                fast = fast.next.next 
            return True
        except:
            return False
            
# or
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        fast = head
        while head:
            head = head.next
            if fast.next and fast.next.next:
                fast = fast.next.next
            else:
                return False
            
            if fast == head:
                return True
        return False
            
c++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode *fast = head;
        while(head){
            head = head->next;
            if(fast->next&&fast->next->next){
                fast = fast->next->next;
            }
            else{
                return false;
            }
            if (fast==head){
                return true;
            }
        }
        return false;
    }
};
