Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:

Input:
    2
   / \
  1   3
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6
Output: false
Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
             is 5 but its right child's value is 4.

tips:
用inOrder得到 binary search tree的順序數字，注意寫法
比較數字大小的連續性即可

c++ 想要保留function更動過後的值，在定義裡面加上 &


python3
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isValidBST(self, root):
        output = []
        self.inOrder(root, output)
        
        for i in range(1, len(output)):
            if output[i-1] >= output[i]:
                return False

        return True

    def inOrder(self, root, output):
        if root is None:
            return
        
        self.inOrder(root.left, output)
        output.append(root.val)
        self.inOrder(root.right, output)

c++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
      
    bool isValidBST(TreeNode* root) {
        vector<int> pre;
        inOrder(root, pre);
        int j = pre.size();
        for(int i=1;i<pre.size();i++)
        {
            if(pre[i-1] >= pre[i])
                return false;            
        }        
        return true;
    }
    void inOrder(TreeNode* root, vector<int> & pre){
        if(root==0)
            return;
        
        inOrder(root->left, pre);
        pre.push_back(root->val);
        inOrder(root->right,pre);
    }
};