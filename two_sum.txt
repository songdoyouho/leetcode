Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].


class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        for i in range(len(nums)):
            if target - nums[i] in nums:
                index = nums.index(target - nums[i])
                if index == i:
                    pass
                else:
                    return [i, index]

c++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
     int n = nums.size();
        unordered_map<int, int> mp; 
        for (int i = 0; i < n; i++) {
            if (mp.find(target - nums[i]) != mp.end()){
                cout << i << " " <<mp[target - nums[i]] << "\n";
                return {mp[target - nums[i]], i};
            }
            cout << i << " " << nums[i] << "\n";
            mp[nums[i]] = i; # 2是在 index 0 的地方！
        }
    }
};
