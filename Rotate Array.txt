Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
Note:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?

python3
class Solution:
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        k = k % len(nums)
        nums[:] = nums[-k:] + nums[:-k] 

c++
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        if (nums.size() == 0 || k == 0){
            return;
        }
        
        // make a copy
        vector<int> copy;
        copy.assign(nums.begin(), nums.end());
        
        // rotate
        for(int i = 0;i < nums.size();i++){
            nums[(i+k)%nums.size()] = copy[i];
        }
        
        // or
        int n = nums.size()-1;
        for(int i=0;i<k;i++){
            nums.insert(nums.begin(),nums[n]);
            nums.erase(nums.end()-1);
        }
    }
};
