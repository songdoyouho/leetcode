Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

Note: For the purpose of this problem, we define empty string as valid palindrome.

Example 1:

Input: "A man, a plan, a canal: Panama"
Output: true
Example 2:

Input: "race a car"
Output: false

python3
class Solution:
    def isPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        l, r = 0, len(s) - 1
        
        while l < r:
            if not s[l].isalnum(): # 如果不是字母
                print(1 ,l, s[l], s[r])
                l += 1
            elif not s[r].isalnum(): # 如果不是字母，找下一個
                print(2, r, s[l], s[r])
                r -= 1
            else: # 如果是字母
                if s[l].lower() != s[r].lower(): # 前面跟後面的字母不一樣，錯
                    print(3, s[l], s[r])
                    return False
                else:
                    print(4, s[l], s[r]) # 一樣的話，沒事兒
                    l += 1
                    r -= 1
        return True
        
c++
class Solution {
public:
    bool isPalindrome(string s) {
        for (int i = 0, j = s.size() - 1; i < j; i++, j--) {   // 注意迴圈怎麼寫的！
            while (isalnum(s[i]) == false && i < j) i++; 
            while (isalnum(s[j]) == false && i < j) j--; 
            if (toupper(s[i]) != toupper(s[j])) return false; 
    }
    return true;
    }
}; 
